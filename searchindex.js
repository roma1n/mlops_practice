Search.setIndex({"docnames": ["index", "mlops_practice", "mlops_practice.config", "mlops_practice.dataset", "mlops_practice.nets", "mlops_practice.trainer", "modules"], "filenames": ["index.rst", "mlops_practice.rst", "mlops_practice.config.rst", "mlops_practice.dataset.rst", "mlops_practice.nets.rst", "mlops_practice.trainer.rst", "modules.rst"], "titles": ["Welcome to MLOps Pracatice\u2019s documentation!", "mlops_practice package", "mlops_practice.config package", "mlops_practice.dataset package", "mlops_practice.nets package", "mlops_practice.trainer package", "mlops_practice"], "terms": {"mlops_practic": 0, "packag": [0, 6], "index": 0, "modul": [0, 6], "search": 0, "page": 0, "config": [1, 6], "datasetparam": [1, 2], "train_ratio": [1, 2], "log": [1, 2], "mlflow_tracking_uri": [1, 2], "modelparam": [1, 2], "batch_siz": [1, 2], "n_epoch": [1, 2, 5], "num_work": [1, 2], "optim": [1, 2, 5], "random_se": [1, 2], "optimparam": [1, 2], "lr": [1, 2, 5], "weight_decai": [1, 2, 5], "param": [1, 2], "dataset": [1, 2, 6], "model": [1, 2, 5], "path": [1, 2], "pathparam": [1, 2], "fashion_mnist_test": [1, 2], "fashion_mnist_train": [1, 2], "result": [1, 2], "mnistdatamodul": [1, 3], "get_test_dataset": [1, 3], "get_train_val_dataset": [1, 3], "make_data_load": [1, 3], "test_dataload": [1, 3], "train_dataload": [1, 3], "val_dataload": [1, 3], "net": [1, 6], "convblock": [1, 4], "forward": [1, 4, 5], "convpoolblock": [1, 4], "multilabelclassifi": [1, 4], "trainer": [1, 6], "classifiertrain": [1, 5], "fit": [1, 5], "load_model": [1, 5], "predict": [1, 5], "save_model": [1, 5], "trainermodul": [1, 5], "configure_optim": [1, 5], "predict_step": [1, 5], "training_step": [1, 5], "validation_step": [1, 5], "class": [1, 2, 3, 4, 5], "mlopspractic": [1, 6], "base": [1, 2, 3, 4, 5], "object": [1, 2, 5], "train_inf": [1, 6], "main": [1, 6], "get_commit_id": [1, 6], "float": [2, 5], "str": [2, 5], "int": [2, 5], "arg": [3, 4, 5], "ani": [3, 4, 5], "kwarg": [3, 4, 5], "lightningdatamodul": [3, 5], "load": 3, "test": 3, "split": 3, "mnist": 3, "separ": 3, "train": [3, 5, 6], "val": 3, "torch": [3, 5], "util": [3, 5], "data": [3, 5], "shuffl": 3, "fals": 3, "implement": 4, "conv": 4, "batchnorm": 4, "relu": 4, "chain": 4, "x": 4, "maxpool": 4, "imag": 4, "classifi": 4, "8x8": 4, "10": 4, "nn": 5, "none": 5, "criterion": 5, "tracking_uri": 5, "params_for_log": 5, "dict": 5, "datamodul": 5, "pytorch_lightn": 5, "filepath": 5, "dataload": 5, "output_csv": 5, "lightningmodul": 5, "multi": 5, "classif": 5, "task": 5, "batch": 5, "tupl": 5, "tensor": 5, "batch_idx": 5, "infer": [5, 6], "valid": 5, "subpackag": 6, "content": 6, "submodul": 6, "command": 6, "git_util": 6}, "objects": {"": [[1, 0, 0, "-", "mlops_practice"]], "mlops_practice": [[1, 0, 0, "-", "commands"], [2, 0, 0, "-", "config"], [3, 0, 0, "-", "dataset"], [1, 0, 0, "-", "git_utils"], [1, 0, 0, "-", "infer"], [4, 0, 0, "-", "nets"], [1, 0, 0, "-", "train"], [5, 0, 0, "-", "trainer"]], "mlops_practice.commands": [[1, 1, 1, "", "MLOpsPractice"], [1, 3, 1, "", "main"]], "mlops_practice.commands.MLOpsPractice": [[1, 2, 1, "", "infer"], [1, 2, 1, "", "train"], [1, 2, 1, "", "train_infer"]], "mlops_practice.config": [[2, 1, 1, "", "DatasetParams"], [2, 1, 1, "", "Logging"], [2, 1, 1, "", "ModelParams"], [2, 1, 1, "", "OptimParams"], [2, 1, 1, "", "Params"], [2, 1, 1, "", "PathParams"]], "mlops_practice.config.DatasetParams": [[2, 4, 1, "", "train_ratio"]], "mlops_practice.config.Logging": [[2, 4, 1, "", "mlflow_tracking_uri"]], "mlops_practice.config.ModelParams": [[2, 4, 1, "", "batch_size"], [2, 4, 1, "", "n_epoch"], [2, 4, 1, "", "num_workers"], [2, 4, 1, "", "optim"], [2, 4, 1, "", "random_seed"]], "mlops_practice.config.OptimParams": [[2, 4, 1, "", "lr"], [2, 4, 1, "", "weight_decay"]], "mlops_practice.config.Params": [[2, 4, 1, "", "dataset"], [2, 4, 1, "", "logging"], [2, 4, 1, "", "model"], [2, 4, 1, "", "path"]], "mlops_practice.config.PathParams": [[2, 4, 1, "", "fashion_mnist_test"], [2, 4, 1, "", "fashion_mnist_train"], [2, 4, 1, "", "model"], [2, 4, 1, "", "result"]], "mlops_practice.dataset": [[3, 1, 1, "", "MNISTDataModule"]], "mlops_practice.dataset.MNISTDataModule": [[3, 2, 1, "", "get_test_dataset"], [3, 2, 1, "", "get_train_val_datasets"], [3, 2, 1, "", "make_data_loader"], [3, 2, 1, "", "test_dataloader"], [3, 2, 1, "", "train_dataloader"], [3, 2, 1, "", "val_dataloader"]], "mlops_practice.git_utils": [[1, 3, 1, "", "get_commit_id"]], "mlops_practice.infer": [[1, 3, 1, "", "main"]], "mlops_practice.nets": [[4, 1, 1, "", "ConvBlock"], [4, 1, 1, "", "ConvPoolBlock"], [4, 1, 1, "", "MultiLabelClassifier"]], "mlops_practice.nets.ConvBlock": [[4, 2, 1, "", "forward"]], "mlops_practice.nets.ConvPoolBlock": [[4, 2, 1, "", "forward"]], "mlops_practice.nets.MultiLabelClassifier": [[4, 2, 1, "", "forward"]], "mlops_practice.train": [[1, 3, 1, "", "main"]], "mlops_practice.trainer": [[5, 1, 1, "", "ClassifierTrainer"], [5, 1, 1, "", "TrainerModule"]], "mlops_practice.trainer.ClassifierTrainer": [[5, 2, 1, "", "fit"], [5, 2, 1, "", "load_model"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "save_model"]], "mlops_practice.trainer.TrainerModule": [[5, 2, 1, "", "configure_optimizers"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "predict_step"], [5, 2, 1, "", "training_step"], [5, 2, 1, "", "validation_step"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"welcom": 0, "mlop": 0, "pracatic": 0, "": 0, "document": 0, "content": [0, 1, 2, 3, 4, 5], "indic": 0, "tabl": 0, "mlops_practic": [1, 2, 3, 4, 5, 6], "packag": [1, 2, 3, 4, 5], "subpackag": 1, "submodul": 1, "command": 1, "modul": [1, 2, 3, 4, 5], "git_util": 1, "infer": 1, "train": 1, "config": 2, "dataset": 3, "net": 4, "trainer": 5}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Welcome to MLOps Pracatice\u2019s documentation!": [[0, "welcome-to-mlops-pracatice-s-documentation"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "mlops_practice package": [[1, "mlops-practice-package"]], "Subpackages": [[1, "subpackages"]], "Submodules": [[1, "submodules"]], "mlops_practice.commands module": [[1, "module-mlops_practice.commands"]], "mlops_practice.git_utils module": [[1, "module-mlops_practice.git_utils"]], "mlops_practice.infer module": [[1, "module-mlops_practice.infer"]], "mlops_practice.train module": [[1, "module-mlops_practice.train"]], "Module contents": [[1, "module-mlops_practice"], [2, "module-mlops_practice.config"], [3, "module-mlops_practice.dataset"], [4, "module-mlops_practice.nets"], [5, "module-mlops_practice.trainer"]], "mlops_practice.config package": [[2, "mlops-practice-config-package"]], "mlops_practice.dataset package": [[3, "mlops-practice-dataset-package"]], "mlops_practice.nets package": [[4, "mlops-practice-nets-package"]], "mlops_practice.trainer package": [[5, "mlops-practice-trainer-package"]], "mlops_practice": [[6, "mlops-practice"]]}, "indexentries": {"mlopspractice (class in mlops_practice.commands)": [[1, "mlops_practice.commands.MLOpsPractice"]], "get_commit_id() (in module mlops_practice.git_utils)": [[1, "mlops_practice.git_utils.get_commit_id"]], "infer() (mlops_practice.commands.mlopspractice method)": [[1, "mlops_practice.commands.MLOpsPractice.infer"]], "main() (in module mlops_practice.commands)": [[1, "mlops_practice.commands.main"]], "main() (in module mlops_practice.infer)": [[1, "mlops_practice.infer.main"]], "main() (in module mlops_practice.train)": [[1, "mlops_practice.train.main"]], "mlops_practice": [[1, "module-mlops_practice"]], "mlops_practice.commands": [[1, "module-mlops_practice.commands"]], "mlops_practice.git_utils": [[1, "module-mlops_practice.git_utils"]], "mlops_practice.infer": [[1, "module-mlops_practice.infer"]], "mlops_practice.train": [[1, "module-mlops_practice.train"]], "module": [[1, "module-mlops_practice"], [1, "module-mlops_practice.commands"], [1, "module-mlops_practice.git_utils"], [1, "module-mlops_practice.infer"], [1, "module-mlops_practice.train"], [2, "module-mlops_practice.config"], [3, "module-mlops_practice.dataset"], [4, "module-mlops_practice.nets"], [5, "module-mlops_practice.trainer"]], "train() (mlops_practice.commands.mlopspractice method)": [[1, "mlops_practice.commands.MLOpsPractice.train"]], "train_infer() (mlops_practice.commands.mlopspractice method)": [[1, "mlops_practice.commands.MLOpsPractice.train_infer"]], "datasetparams (class in mlops_practice.config)": [[2, "mlops_practice.config.DatasetParams"]], "logging (class in mlops_practice.config)": [[2, "mlops_practice.config.Logging"]], "modelparams (class in mlops_practice.config)": [[2, "mlops_practice.config.ModelParams"]], "optimparams (class in mlops_practice.config)": [[2, "mlops_practice.config.OptimParams"]], "params (class in mlops_practice.config)": [[2, "mlops_practice.config.Params"]], "pathparams (class in mlops_practice.config)": [[2, "mlops_practice.config.PathParams"]], "batch_size (mlops_practice.config.modelparams attribute)": [[2, "mlops_practice.config.ModelParams.batch_size"]], "dataset (mlops_practice.config.params attribute)": [[2, "mlops_practice.config.Params.dataset"]], "fashion_mnist_test (mlops_practice.config.pathparams attribute)": [[2, "mlops_practice.config.PathParams.fashion_mnist_test"]], "fashion_mnist_train (mlops_practice.config.pathparams attribute)": [[2, "mlops_practice.config.PathParams.fashion_mnist_train"]], "logging (mlops_practice.config.params attribute)": [[2, "mlops_practice.config.Params.logging"]], "lr (mlops_practice.config.optimparams attribute)": [[2, "mlops_practice.config.OptimParams.lr"]], "mlflow_tracking_uri (mlops_practice.config.logging attribute)": [[2, "mlops_practice.config.Logging.mlflow_tracking_uri"]], "mlops_practice.config": [[2, "module-mlops_practice.config"]], "model (mlops_practice.config.params attribute)": [[2, "mlops_practice.config.Params.model"]], "model (mlops_practice.config.pathparams attribute)": [[2, "mlops_practice.config.PathParams.model"]], "n_epoch (mlops_practice.config.modelparams attribute)": [[2, "mlops_practice.config.ModelParams.n_epoch"]], "num_workers (mlops_practice.config.modelparams attribute)": [[2, "mlops_practice.config.ModelParams.num_workers"]], "optim (mlops_practice.config.modelparams attribute)": [[2, "mlops_practice.config.ModelParams.optim"]], "path (mlops_practice.config.params attribute)": [[2, "mlops_practice.config.Params.path"]], "random_seed (mlops_practice.config.modelparams attribute)": [[2, "mlops_practice.config.ModelParams.random_seed"]], "result (mlops_practice.config.pathparams attribute)": [[2, "mlops_practice.config.PathParams.result"]], "train_ratio (mlops_practice.config.datasetparams attribute)": [[2, "mlops_practice.config.DatasetParams.train_ratio"]], "weight_decay (mlops_practice.config.optimparams attribute)": [[2, "mlops_practice.config.OptimParams.weight_decay"]], "mnistdatamodule (class in mlops_practice.dataset)": [[3, "mlops_practice.dataset.MNISTDataModule"]], "get_test_dataset() (mlops_practice.dataset.mnistdatamodule method)": [[3, "mlops_practice.dataset.MNISTDataModule.get_test_dataset"]], "get_train_val_datasets() (mlops_practice.dataset.mnistdatamodule method)": [[3, "mlops_practice.dataset.MNISTDataModule.get_train_val_datasets"]], "make_data_loader() (mlops_practice.dataset.mnistdatamodule method)": [[3, "mlops_practice.dataset.MNISTDataModule.make_data_loader"]], "mlops_practice.dataset": [[3, "module-mlops_practice.dataset"]], "test_dataloader() (mlops_practice.dataset.mnistdatamodule method)": [[3, "mlops_practice.dataset.MNISTDataModule.test_dataloader"]], "train_dataloader() (mlops_practice.dataset.mnistdatamodule method)": [[3, "mlops_practice.dataset.MNISTDataModule.train_dataloader"]], "val_dataloader() (mlops_practice.dataset.mnistdatamodule method)": [[3, "mlops_practice.dataset.MNISTDataModule.val_dataloader"]], "convblock (class in mlops_practice.nets)": [[4, "mlops_practice.nets.ConvBlock"]], "convpoolblock (class in mlops_practice.nets)": [[4, "mlops_practice.nets.ConvPoolBlock"]], "multilabelclassifier (class in mlops_practice.nets)": [[4, "mlops_practice.nets.MultiLabelClassifier"]], "forward() (mlops_practice.nets.convblock method)": [[4, "mlops_practice.nets.ConvBlock.forward"]], "forward() (mlops_practice.nets.convpoolblock method)": [[4, "mlops_practice.nets.ConvPoolBlock.forward"]], "forward() (mlops_practice.nets.multilabelclassifier method)": [[4, "mlops_practice.nets.MultiLabelClassifier.forward"]], "mlops_practice.nets": [[4, "module-mlops_practice.nets"]], "classifiertrainer (class in mlops_practice.trainer)": [[5, "mlops_practice.trainer.ClassifierTrainer"]], "trainermodule (class in mlops_practice.trainer)": [[5, "mlops_practice.trainer.TrainerModule"]], "configure_optimizers() (mlops_practice.trainer.trainermodule method)": [[5, "mlops_practice.trainer.TrainerModule.configure_optimizers"]], "fit() (mlops_practice.trainer.classifiertrainer method)": [[5, "mlops_practice.trainer.ClassifierTrainer.fit"]], "forward() (mlops_practice.trainer.trainermodule method)": [[5, "mlops_practice.trainer.TrainerModule.forward"]], "load_model() (mlops_practice.trainer.classifiertrainer method)": [[5, "mlops_practice.trainer.ClassifierTrainer.load_model"]], "mlops_practice.trainer": [[5, "module-mlops_practice.trainer"]], "predict() (mlops_practice.trainer.classifiertrainer method)": [[5, "mlops_practice.trainer.ClassifierTrainer.predict"]], "predict_step() (mlops_practice.trainer.trainermodule method)": [[5, "mlops_practice.trainer.TrainerModule.predict_step"]], "save_model() (mlops_practice.trainer.classifiertrainer method)": [[5, "mlops_practice.trainer.ClassifierTrainer.save_model"]], "training_step() (mlops_practice.trainer.trainermodule method)": [[5, "mlops_practice.trainer.TrainerModule.training_step"]], "validation_step() (mlops_practice.trainer.trainermodule method)": [[5, "mlops_practice.trainer.TrainerModule.validation_step"]]}})